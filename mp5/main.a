	TITLE	"main.a by Douglas Jones -- exerciser for array and list stacks"
	; A recursion-free solution to MP4 using several stacks.
	; The stacks hold trees that have yet to be plotted on the screen.

	; NOTE:  There is no recursion here, it's all done with loops and stacks

	USE	"hawk.h"
	USE	"stdio.h"
	USE	"stack.h"
	USE	"arraystack.h"
	USE	"liststack.h"

	INT	MAIN
	S	MAIN

; activation record for MAIN
;RETAD	=	0
ARSIZE	=	4

MAIN:
	STORES	R1,R2
	ADDSI	R2,ARSIZE

					; ==============
					; -- A, make some stacks
	LIL	R1,NEWARRAYSTACK
	JSRS	R1,R1			; -- stack for sizes of trees
	MOVE	R13,R3			; sizestack = newarraystack()
	LIL	R1,NEWLISTSTACK
	JSRS	R1,R1			; -- stack for x coordinates
	MOVE	R14,R3			; xstack = newliststack()
	LIL	R1,NEWLISTSTACK
	JSRS	R1,R1			; -- stack for y coordinates
	MOVE	R15,R3			; ystack = newliststack()
	; here	R13 = sizestack
	;     	R14 = xstack
	;     	R14 = ystack		; -- these stacks describe pending trees
	
					; ==============
					; -- B, get tree size from screen size
	LIL	R3,TERMINFO
	LOAD	R4,R3,TERMCOLS		; -- get termcols
	LOAD	R5,R3,TERMROWS		; -- get termrows

					; -- problem 1, what size fits?
	LIS	R3,1			; size = 1
	; here	R3 = size		; -- size is always a power of 2
	;	R4 = termcols
	;       R5 = termrows
	;	R6 = height then width
	;	R13,14,15 = stacks for size,x,y
SIZELP:					; for (;;) {
	MOVESL	R6,R3,1
	ADDSI	R6,-1			;   height = 2*size - 1
	CMP	R5,R6
	BLT	SIZEQT			;   if (termrows < height) break
	SL	R6,1			;   width = 2*height
	CMP	R4,R6
	BLT	SIZEQT			;   if (termcols < width) break
	SL	R3,1			;   size = size * 2
	BR	SIZELP
SIZEQT:					; }
	
					; -- we computed one size too large
	SRU	R3,1			; -- parameter size = size/2
	SR	R4,1			; -- parameter x = termcols/2
	SR	R5,1			; -- parameter y = termrows/2 - size + 1

					; ==============
					; -- C, schedule first tree to print
	; here	R3 = size		; -- size of the tree
	;	R4 = termcols		; -- x location of tree center
	;       R5 = termrows		; -- y location of gree center
	;	R13,14,15 = stacks for size,x,y

	MOVE	R8,R4
	MOVE	R9,R5			; -- move x and y temporarily
	MOVE	R4,R3			; -- parameter size
	MOVE	R3,R13			; -- parameter sizestack
	LOAD	R1,R3,PUSH
	JSRS	R1,R1			; sizestack->push( sizestack, size )
	MOVE	R4,R8			; -- parameter x
	MOVE	R3,R14			; -- parameter xstack
	LOAD	R1,R3,PUSH
	JSRS	R1,R1			; xstack->push( xstack, x )
	MOVE	R4,R9			; -- parameter y
	MOVE	R3,R15			; -- parameter ystack
	LOAD	R1,R3,PUSH
	JSRS	R1,R1			; ystack->push( ystack, x )

					; ==============
					; -- D, plot trees till stack is empty
PLOTLOOP:				; for (;;) {
	; here	R13 = sizestack
	;       R14 = xstack
	;       R15 = ystack
	MOVE	R3,R13			;   -- parameter sizestack
	LOAD	R1,R3,EMPTY
	JSRS	R1,R1
	TESTR	R3
	BZR	PLOTQUIT		;   if (sizestack->empty(sizestack)) brk

	MOVE	R3,R14			;   -- parameter xstack
	LOAD	R1,R3,EMPTY
	JSRS	R1,R1
	TESTR	R3
	BZR	PLOTQUIT		;   if (xstack->empty( xstack )) break

	MOVE	R3,R15			;   -- parameter ystack
	LOAD	R1,R3,EMPTY
	JSRS	R1,R1
	TESTR	R3
	BZR	PLOTQUIT		;   if (ystack->empty( ystack )) break

					;   -- if any stack was empty we quit
	MOVE	R3,R13			;   -- parameter sizestack
	LOAD	R1,R3,POP
	JSRS	R1,R1			; 
	MOVE	R8,R3			;   size = sizestack->pop( sizestack )
	MOVE	R3,R14			;   -- parameter xstack
	LOAD	R1,R3,POP
	JSRS	R1,R1
	MOVE	R9,R3			;   x = sizestack->pop( xstack )
	MOVE	R3,R15			;   -- parameter ystack
	LOAD	R1,R3,POP
	JSRS	R1,R1
	MOVE	R10,R3			;   y = sizestack->pop( ystack )
	; here	R8 = size
	;     	R9 = x
	;     	R10 = y			;   -- characteristics of one tree
	;	R13,14,15 = stacks for size,x,y

	TESTR	R8
	BZS	NOTREE			;   if (size >= 1) {

					;     -- push left subtree attributes
	MOVE	R3,R13			;     -- parameter sizestack
	MOVE	R4,R8			;
	SR	R4,1			;     -- parameter size/2
	LOAD	R1,R3,PUSH
	JSRS	R1,R1			;     sizestack->push( sizestack, size/2 )

	MOVE	R3,R14			;     -- parameter xstack
	MOVE	R4,R9
	SUB	R4,R4,R8		;     -- parameter x - size
	LOAD	R1,R3,PUSH
	JSRS	R1,R1			;     xstack->push( xstack, x - size )

	MOVE	R3,R15			;     -- parameter ystack
	MOVE	R4,R8
	SR	R4,1
	ADD	R4,R10,R4		;     -- parameter y + size/2
	LOAD	R1,R3,PUSH
	JSRS	R1,R1			;     ystack->push( ystack, y + size/2 )

					;     -- push right subtree attributes
	MOVE	R3,R13			;     -- parameter sizestack
	MOVE	R4,R8			;
	SR	R4,1			;     -- parameter size/2
	LOAD	R1,R3,PUSH
	JSRS	R1,R1			;     sizestack->push(sizestack,size/2)

	MOVE	R3,R14			;     -- parameter xstack
	MOVE	R4,R9
	ADD	R4,R4,R8		;     -- parameter x + size
	LOAD	R1,R3,PUSH
	JSRS	R1,R1			;     xstack->push( xstack, x + size )

	MOVE	R3,R15			;     -- parameter ystack
	MOVE	R4,R8
	SR	R4,1
	ADD	R4,R10,R4		;     -- parameter y + size/2
	LOAD	R1,R3,PUSH
	JSRS	R1,R1			;     ystack->push( ystack, y + size/2 )

PLOTBRANCH:				;     do { -- output size rows of /\
	; here	R8 = size
	;     	R9 = x
	;     	R10 = y			;       -- characteristics of one tree
	;	R13,14,15 = stacks for size,x,y
	MOVE	R3,R9
	SUB	R3,R3,R8		;       -- parameter x - size
	MOVE	R4,R10			;       -- parameter y
	LIL	R1,PUTAT
	JSRS	R1,R1			;       putat( x - size, y )
	LIS	R3,'/'			;       -- parameter
	LIL	R1,PUTCHAR
	JSRS	R1,R1			;       putchar( '/' )

	MOVE	R3,R9
	ADD	R3,R3,R8
	ADDSI	R3,-1			;       -- parameter x + size - 1
	MOVE	R4,R10			;       -- parameter y
	LIL	R1,PUTAT
	JSRS	R1,R1			;       putat( x + size - 1, y - 1 )
	LIS	R3,'\'			;       -- parameter
	LIL	R1,PUTCHAR
	JSRS	R1,R1			;       putchar( '\' )

	ADDSI	R10,-1			;       y = y - 1   -- move up
	ADDSI	R8,-1			;       size = size - 1
	BGT	PLOTBRANCH		;     } while (size > 0)
NOTREE	=	PLOTLOOP                ;   }
	BR	PLOTLOOP		; }
PLOTQUIT:				; -- assert, some stack was empty

					; ==============
					; -- E, test that all stacks are empty
	MOVE	R3,R13			; -- parameter sizestack
	LOAD	R1,R3,EMPTY
	JSRS	R1,R1
	TESTR	R3
	BZS	PLOTBUG 		; if (!sizestack->empty(sizestack)

	MOVE	R3,R14			; -- parameter xstack
	LOAD	R1,R3,EMPTY
	JSRS	R1,R1
	TESTR	R3
	BZS	PLOTBUG			; ||  !xstack->empty(xstack)

	MOVE	R3,R15			; -- parameter ystack
	LOAD	R1,R3,EMPTY
	JSRS	R1,R1
	TESTR	R3
	BZR	PLOTOK 			; || (ystack->empty(xstack)) {
PLOTBUG:
	LEA	R3,STACKBUG
	LIL	R1,PUTS
	JSRS	R1,R1			;    puts( "stacks not all empty" )
PLOTOK:					; }
	
	ADDSI	R2,-ARSIZE
	LOADS	PC,R2			; return

STACKBUG:
	ASCII	"stacks not all empty",0
	
	END
